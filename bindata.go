// Code generated by go-bindata.
// sources:
// templates/client.gohtml
// DO NOT EDIT!

package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesClientGohtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x8a\x5f\x15\x87\x14\x4d\xd9\x1d\x69\x07\xb4\x13\x07\xa6\x69\xf0\x02\x21\x33\x5d\xa1\x4d\x2b\x37\x65\x9a\xa6\xbe\x3b\xb2\x53\xb1\x8e\x5b\x6c\xff\xfe\xfc\xdb\xe9\x7d\xf8\xf6\x15\xe1\x7a\x85\xdb\xcf\xef\x69\x32\xa6\x6e\xfb\x8e\x13\xac\x81\x94\xd8\xc7\x8a\xe0\x5e\x34\x39\x88\x00\x00\x8a\xaa\x4e\xa7\xf1\xc3\x85\xae\x5d\x27\xfa\xf2\x43\xeb\x63\x77\xf2\xbc\xae\x9a\x91\xd6\xa1\xa9\x29\xa6\x22\x2b\x05\x8f\x69\x2a\x32\x8e\xe2\x51\x18\xa5\x31\x9f\x63\x0c\xd8\xd1\x59\xea\x6f\xc4\x3f\x75\x90\xf1\x5b\x6d\xb5\xdc\x87\xfc\x42\x66\xb9\x1c\x95\x78\xbc\x97\xe3\x6a\x80\x80\xa7\x0d\x22\x9d\xed\x7d\xad\x94\x92\x3b\xec\xb7\xd8\xe0\x8f\x67\x00\xa6\x34\x72\x44\x30\x93\x31\xe9\xd2\xe7\x03\x2c\x90\x43\xe2\x31\x24\x25\x4b\xf3\x9d\x01\xe9\xb9\x1d\xe5\x95\xd2\xa9\x3b\xce\x47\xd1\x7d\x6c\x50\x87\x0f\x4b\x1b\xca\xdf\xf9\x56\x02\xeb\xb9\x1a\x34\xf1\xcc\xd5\xbb\x0c\x17\x81\xd5\xad\x0e\xd4\x37\x97\x39\xb7\x02\x31\x77\x5c\xaa\x0b\xb1\xdc\x37\x97\xe5\x96\x4b\x6d\xa9\x12\x62\x16\x81\x2e\xec\xb6\xbe\x69\x6c\xf1\xcf\x88\x5b\xf8\x28\x56\x10\x27\xab\x4c\x2e\xe7\x21\x7a\x17\xcd\xe8\x7c\x03\x4c\xe6\xf6\x67\xbf\x01\x00\x00\xff\xff\xbe\x44\x50\x29\x30\x02\x00\x00"

func templatesClientGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesClientGohtml,
		"templates/client.gohtml",
	)
}

func templatesClientGohtml() (*asset, error) {
	bytes, err := templatesClientGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client.gohtml", size: 560, mode: os.FileMode(420), modTime: time.Unix(1494292301, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client.gohtml": templatesClientGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"client.gohtml": &bintree{templatesClientGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

