// Code generated by go-bindata.
// sources:
// templates/client.gohtml
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesClientGohtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x41\x6b\xe3\x40\x0c\x85\xef\xf3\x2b\x1e\x66\x0f\xf6\x12\x26\xf7\x85\x1c\x96\x40\x21\x87\x86\x90\xf6\x0f\xb8\x13\xc5\x31\xb5\xc7\x46\x1e\x37\x04\x33\xff\xbd\x48\x36\x8d\x5d\xd2\x53\x6f\x63\xe9\x3d\xe9\xe9\x73\x9b\xbb\xf7\xbc\x20\x0c\x03\xec\x61\x7a\xc7\x68\x4c\x59\xb7\x0d\x07\xa4\x06\x48\x8a\x32\x5c\xfa\x37\xeb\x9a\x7a\xdd\x51\x51\x93\x0f\x65\xb3\x2e\xaa\x9e\xd6\xae\x2a\xc9\x87\xc4\x40\xfc\x9c\xfb\x82\x60\x77\xea\xec\x64\x0a\xa0\x0d\xbb\xcf\x6b\x99\x8a\x64\xdc\x12\x2e\x88\x71\x32\x91\x3f\x89\x32\x33\xe6\xdc\x7b\x87\x3d\x5d\x45\xf3\x42\xfc\x51\x3a\xf1\x6c\x75\x43\xca\xad\x1b\x5f\x18\x57\xda\xf1\x2b\xc3\xdf\xa5\x1c\x83\x01\x1c\xfe\x6d\xe0\xe9\x9a\x2e\x7b\x99\xb4\xec\xf1\xb0\xc5\x06\x5f\xf3\x0c\xc0\x14\x7a\xf6\x70\x26\x1a\x13\x6e\xed\xc8\xe2\x6e\xdb\x3d\xe5\x8e\x50\xfa\x40\x7c\x96\xd7\xb0\xb8\xf6\x99\xc2\xa5\x39\x3d\xba\x36\xcd\xb9\xe8\xb4\xf0\x9f\x8b\x57\x99\x1b\x63\x06\xcd\x74\xa4\xb6\xba\x4d\xa5\x15\x88\xb9\xe1\x6c\x81\xe3\x71\x12\x74\x81\x7b\x17\x34\x81\x9c\xb1\x40\x21\x9e\x1f\x62\x29\xd9\xd4\x29\xab\x3f\x73\x20\xbf\x88\xab\x21\x84\x5d\x5b\xdd\xe6\xb8\xe7\xda\x4c\x25\xc4\x2c\x02\x25\x6f\xb7\x79\x55\xa5\xc9\xb7\x1c\x76\x16\x23\x59\x41\x82\xac\xc6\xc9\xd9\xb4\x44\x7f\x90\x56\x74\xbf\x01\xa2\xb9\xd3\xfa\x0c\x00\x00\xff\xff\xb0\x21\xe5\x2f\xc4\x02\x00\x00"

func templatesClientGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesClientGohtml,
		"templates/client.gohtml",
	)
}

func templatesClientGohtml() (*asset, error) {
	bytes, err := templatesClientGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client.gohtml", size: 708, mode: os.FileMode(420), modTime: time.Unix(1510783309, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client.gohtml": templatesClientGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"client.gohtml": &bintree{templatesClientGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

