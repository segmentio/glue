// Code generated by go-bindata.
// sources:
// templates/client.gohtml
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesClientGohtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x51\xc1\x6a\xe3\x30\x10\xbd\xeb\x2b\x1e\x66\x59\xec\x25\x28\xf7\x85\x1c\x96\xc0\x42\x0e\x0d\x21\xed\x0f\xa8\xca\x44\x31\xb5\x65\x33\x96\x13\x82\xd1\xbf\x17\x8d\x4d\x13\x87\xf4\xd4\xdb\x68\xde\xbc\x37\x6f\x9e\x5a\x63\x3f\x8c\x23\x0c\x03\xf4\x6e\xaa\x63\x54\xaa\xac\xdb\x86\x03\x72\x05\x64\xae\x0c\xa7\xfe\x5d\xdb\xa6\x5e\x76\xe4\x6a\xf2\xa1\x6c\x96\xae\xea\x69\x69\xab\x92\x7c\xc8\x14\x12\x9f\x8d\x77\x04\xbd\x11\x66\x97\x54\x00\x01\xf4\xd6\xd4\x49\x15\xd9\xb8\x25\x9c\x10\xe3\x44\x22\x7f\x48\x93\x85\x52\xc7\xde\x5b\x6c\xe9\x92\x66\x5e\x89\xcf\xa5\x4d\x9c\xb5\x6c\xc8\xb9\xb5\x63\x85\x71\xa5\x1e\x5f\x05\xfe\xcc\xc7\x31\x28\xc0\xe2\xef\x0a\x9e\x2e\xf9\x1c\x2b\x12\xa4\xf7\xbb\x35\x56\xf8\xd2\x53\x00\x53\xe8\xd9\xc3\xaa\xa8\x54\xb8\xb6\x63\x16\x37\xda\xe6\xbf\xb1\x84\xd2\x07\xe2\x63\xaa\x86\xd9\xb5\x2f\x14\x4e\xcd\xe1\xd9\xb5\xb9\x61\xd7\x49\xe3\x1f\xbb\xb7\xa4\x1b\x63\x01\xf1\xb4\xa7\xb6\xba\x4e\xad\x05\x88\xb9\xe1\x62\x16\xc7\x73\x27\xe8\x02\xf7\x36\x88\x83\x74\xc6\x2c\x8a\xc4\xf9\xc6\x96\x24\x9b\x5b\xc9\xea\xd7\x7d\x20\x3f\xb0\x2b\x26\x80\xb3\x61\x70\x82\xf1\x38\x28\x30\x31\xa7\xbf\x90\xd4\xf5\xda\x54\x55\x9e\x3d\x78\xd0\x77\x16\xb2\x05\x92\x89\x05\x7e\x8b\x64\x21\x12\xd3\xef\x48\x47\x96\x2b\x20\xaa\x5b\x54\x9f\x01\x00\x00\xff\xff\x51\x74\x01\xa0\xc1\x02\x00\x00"

func templatesClientGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesClientGohtml,
		"templates/client.gohtml",
	)
}

func templatesClientGohtml() (*asset, error) {
	bytes, err := templatesClientGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client.gohtml", size: 705, mode: os.FileMode(420), modTime: time.Unix(1518551179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client.gohtml": templatesClientGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"client.gohtml": &bintree{templatesClientGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

