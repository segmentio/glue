// Code generated by go-bindata.
// sources:
// templates/client.gohtml
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesClientGohtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x6a\xdc\x30\x14\x85\xf7\x7a\x8a\x83\x09\xc5\x2e\x46\xb3\x2f\x64\x51\x0c\x85\x2c\x1a\x42\xda\x3e\x80\xaa\xdc\xf1\x98\xda\xb2\xb9\x96\xf3\x83\xf1\xbb\x97\x7b\xe5\xce\x8c\x87\xc9\xa2\x90\x9d\x7d\x7f\x74\xbe\x73\xa4\xc1\xf9\x3f\xae\x26\xcc\x33\xec\xc3\xfa\xbd\x2c\xc6\x34\xdd\xd0\x73\x44\x6e\x20\xad\x66\x0f\xfb\x6b\xa4\xaa\x0f\x91\x5e\xa3\x0c\x00\x40\xe6\xd3\x7f\x96\x86\x28\x3c\xe9\x2a\x90\xd5\x4d\x3c\x4c\xbf\xad\xef\xbb\xdd\x48\x75\x47\x21\x36\xfd\xae\x6e\x27\xda\xf9\xb6\xa1\x10\x33\x93\x56\xd8\x85\x9a\x60\xef\x54\x6c\xfc\x77\xae\xb0\xdc\xbb\x4e\x40\x90\x25\xb0\x78\xc0\xb2\x6c\x75\x0a\x63\xf6\x53\xf0\xb8\xa7\x17\x99\xf9\x41\xfc\xdc\x78\xd9\xa9\x54\x22\xe7\xc1\xa7\xaf\xab\x06\x12\x87\x4d\x13\x6b\x59\xce\x6e\x47\xba\xec\x1e\x25\x0b\x7c\xde\x2a\x61\x36\x80\xc7\x97\x5b\x04\x7a\xc9\xb7\xbd\x42\x5a\xf6\xf1\xa1\xc2\x2d\x8e\x28\x06\x60\x8a\x13\x07\x78\xb3\x18\x13\xdf\x86\x94\xfc\x69\xed\xee\x9b\xf3\x84\x26\x44\xe2\xbd\x7c\xcd\x9b\xa0\xbe\x53\x3c\xf4\x4f\xd7\x82\xca\x1d\xd7\xa3\x16\xbe\x72\xfd\x53\xce\x15\x5e\x65\x7a\xa4\xa1\x7d\x5b\x4b\x25\x88\xb9\xe7\x62\x93\xe4\x75\x12\x8c\x91\x27\x1f\x95\x40\x6c\x7c\x54\x8a\x22\xf7\x8e\x23\xbd\xcf\xdc\x6b\xcc\x37\xe7\x59\x6e\x9c\x26\x90\x9b\x0b\x92\xf8\x8a\xf5\x39\xda\xb5\x5a\x9e\x2c\xfe\x5f\x38\x6a\x19\x78\x76\x0c\x96\x36\x2e\x07\xb5\x4d\xcc\x72\xf3\x7a\xc7\xb6\x72\x6d\xfb\x2e\x58\x79\xe4\xd0\xe7\x7c\xee\xcc\x9e\x19\xcb\x4a\x08\x67\x89\x4f\xaa\x5a\xa8\xca\xfa\x5c\xb4\xa2\x7c\x06\x58\xcc\x29\xcc\xbf\x01\x00\x00\xff\xff\xb8\x9e\xbf\x20\xc0\x03\x00\x00"

func templatesClientGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesClientGohtml,
		"templates/client.gohtml",
	)
}

func templatesClientGohtml() (*asset, error) {
	bytes, err := templatesClientGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client.gohtml", size: 960, mode: os.FileMode(420), modTime: time.Unix(1544049137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client.gohtml": templatesClientGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"client.gohtml": &bintree{templatesClientGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

