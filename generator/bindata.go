// Code generated by go-bindata.
// sources:
// templates/client.gohtml
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesClientGohtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x51\xc1\x6a\xeb\x30\x10\xbc\xeb\x2b\x06\xf3\x0e\xf6\x23\x28\xf7\x07\x39\x3c\x02\x85\x1c\x1a\x42\xda\x1f\x50\x95\x8d\x62\x6a\xcb\x66\x2d\x27\x04\xa3\x7f\x2f\x5a\x9b\x26\x0e\xe9\xa9\xb7\xd5\xce\xce\xec\xec\xa8\x35\xf6\xd3\x38\xc2\x30\x40\xef\xa6\x3a\x46\xa5\xca\xba\x6d\x38\x20\x57\x40\xe6\xca\x70\xea\x3f\xb4\x6d\xea\x65\x47\xae\x26\x1f\xca\x66\xe9\xaa\x9e\x96\xb6\x2a\xc9\x87\x4c\x21\xf1\xd9\x78\x47\xd0\x1b\x61\x76\x49\x05\x10\x40\x6f\x4d\x9d\x54\x91\x8d\x5b\xc2\x09\x31\x4e\x24\xf2\x87\x34\x59\x28\x75\xec\xbd\xc5\x96\x2e\x69\xe6\x8d\xf8\x5c\xda\xc4\x59\xcb\x86\x9c\x5b\x3b\x56\x18\x57\xea\xf1\x55\xe0\xef\x7c\x1c\x83\x02\x2c\xfe\xad\xe0\xe9\x92\xcf\xb1\x22\x41\x7a\xbf\x5b\x63\x85\x6f\x3d\x05\x30\x85\x9e\x3d\xac\x8a\x4a\x85\x6b\x3b\x66\x71\xa3\x6d\x5e\x8c\x25\x94\x3e\x10\x1f\x53\x35\xcc\xae\x7d\xa5\x70\x6a\x0e\xcf\xae\xcd\x0d\xbb\x4e\x1a\xff\xd9\xbd\x27\xdd\x18\x0b\x88\xa7\x3d\xb5\xd5\x75\x6a\x2d\x40\xcc\x0d\x17\xb3\x38\x9e\x3b\x41\x17\xb8\xb7\x41\x1c\xa4\x33\x66\x51\x24\xce\x0f\xb6\x24\xd9\xdc\x4a\x56\x7f\xee\x03\xf9\x85\x5d\x31\x01\x9c\x0d\x83\x13\x8c\xc7\x41\x81\x89\x39\xfd\x85\xa4\xae\xd7\xa6\xaa\xf2\xec\xc1\x83\xbe\xb3\x90\x2d\x90\x4c\x2c\x46\xc5\x42\x14\xa6\xcf\x91\x8e\xec\x56\x40\x54\xb7\xa4\xbe\x02\x00\x00\xff\xff\x84\x5e\xba\x8e\xc0\x02\x00\x00"

func templatesClientGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesClientGohtml,
		"templates/client.gohtml",
	)
}

func templatesClientGohtml() (*asset, error) {
	bytes, err := templatesClientGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client.gohtml", size: 704, mode: os.FileMode(420), modTime: time.Unix(1510878534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client.gohtml": templatesClientGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"client.gohtml": &bintree{templatesClientGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

