// Code generated by go-bindata.
// sources:
// templates/client.gohtml
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesClientGohtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x52\x4d\x8b\xdb\x30\x10\xbd\xeb\x57\x3c\x4c\x29\x76\x31\xca\xbd\x90\x43\x31\x14\x72\x68\x08\x69\xff\x80\xaa\x4c\x1c\x53\x5b\x36\x63\x39\x1f\x18\xfd\xf7\x22\xc9\x6c\xe2\x90\x85\x65\x37\xec\x4d\x9a\xaf\xf7\xde\xcc\xeb\x94\xfe\xa7\x4a\xc2\x38\x42\x6e\xa6\xb7\x73\x42\x54\x4d\xd7\xb2\x45\x2a\x80\x44\xb7\xc6\xd2\xd9\x26\xc2\x7f\xca\xca\x1e\x86\xbf\x52\xb7\xcd\xa2\xa7\xb2\x21\x63\xab\x76\x51\xd6\x03\x2d\x74\x5d\x91\xb1\x89\x80\x1f\xc6\xca\x94\x04\xb9\x0a\x63\x7a\x3f\x12\x08\x09\xb9\x56\x8d\x87\x40\x12\x21\xed\x01\xce\x4d\x4d\x64\x76\xbe\x32\x13\x62\x3f\x18\x8d\x35\x9d\x7c\xcd\x6f\xe2\x63\xa5\x7d\x4f\x11\x10\x52\xee\x74\x7c\x21\x42\xca\xf8\xcb\xf0\x6d\x5e\x8e\x51\x00\x1a\xdf\x97\x30\x74\x4a\xe7\xb9\xcc\xa7\xe4\x76\x53\x60\x89\x97\x79\x02\x60\xb2\x03\x1b\x68\xe1\x84\xb0\x97\x2e\x2e\xe6\xda\xb6\xfa\xa9\x34\xa1\x32\x96\x78\xef\x5f\xe3\x4c\xed\x2f\xb2\x87\x76\xf7\x48\x6d\xaa\xb8\xec\x43\xe0\x07\x97\x7f\xfc\x5c\xe7\x32\x04\x4e\x5b\xea\xea\xcb\x14\xca\x41\xcc\x2d\x67\xb3\x75\x3c\x66\x52\xc4\xa3\x7c\x1e\xa1\x59\xfb\x84\x9e\x6a\x7b\xc6\x64\x0f\x39\xc5\x72\x3c\x5d\x2b\x7a\xcb\x83\xb6\x41\x9c\x3f\xd9\xec\xec\xbe\xe7\x15\xc5\xc1\x45\xa9\x0e\xbe\xf8\x72\x7b\xfc\x0f\x6c\x22\x90\x00\x8e\x8a\xc1\x3e\x8d\xfb\xc2\x90\x26\x66\xef\xbb\xe0\x30\x59\xa8\xba\x4e\x93\x3b\x0e\xf2\x86\x42\x12\x77\x96\xe3\x6b\x18\x19\xb7\x3d\x39\x31\x44\x02\xb8\x00\x9c\x78\xab\xaa\x27\x1e\xe8\x9d\x8a\x6f\x18\xe4\x78\x92\xfa\xab\x51\xfe\x07\x00\x00\xff\xff\xf8\xa9\x24\xc3\xb8\x04\x00\x00"

func templatesClientGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesClientGohtml,
		"templates/client.gohtml",
	)
}

func templatesClientGohtml() (*asset, error) {
	bytes, err := templatesClientGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client.gohtml", size: 1208, mode: os.FileMode(420), modTime: time.Unix(1544146946, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client.gohtml": templatesClientGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"client.gohtml": &bintree{templatesClientGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

