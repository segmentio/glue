// Code generated by go-bindata.
// sources:
// templates/client.gohtml
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesClientGohtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\xcd\x6e\xa3\x40\x0c\xbe\xfb\x29\x3e\xa1\x3d\x0c\xab\x68\x72\x5f\x29\x87\x55\x4e\x7b\xd8\x28\x4a\xfb\x02\x74\xe2\x4e\x50\x61\x40\x66\x68\x14\x45\xbc\x7b\x65\x83\x1a\xd2\xdb\x60\x7f\xbf\xa6\xaf\xc2\x47\x15\x19\xf7\x3b\xfc\x71\x79\x4f\x13\x51\xdd\xf6\x9d\x64\x38\x02\x8a\x58\xe7\xcb\xf8\xe6\x43\xd7\x6e\x07\x8e\x2d\xa7\x5c\x77\xdb\xd8\x8c\xbc\x0d\x4d\xcd\x29\x17\x04\xe5\x4b\x95\x22\xc3\xff\x33\xe6\xa0\x2a\x80\x2d\xfc\xa1\x6a\x55\x15\xc5\xec\x92\x2f\x98\xa6\x85\xc4\xe9\xac\xc8\x92\xe8\x7d\x4c\x01\x07\xbe\x2a\xe6\x85\xe5\xb3\x0e\xca\xd9\x9b\x83\x93\x3e\xcc\x2f\xcc\x96\x7e\xfe\x2a\xf1\xfb\x19\x8e\x3b\x01\x01\x7f\x76\x48\x7c\x75\xcf\xbb\x52\x57\xfe\x74\xdc\x63\x87\x6f\x3d\x02\x84\xf3\x28\x09\x81\x26\xa2\x7c\xeb\xe7\x5b\xac\x24\x87\x2c\x63\xc8\xa6\xac\xe4\xa7\x00\xca\x79\x54\xff\xcf\xf9\xd2\x9d\x97\xea\xd6\xc7\x05\x4b\xf8\x6b\x1d\x63\x7d\x12\x57\x49\x1c\x6c\xf0\x57\xe2\xab\x9a\x2b\xc0\x59\xab\x13\xf7\xcd\x6d\x99\x6d\xc0\x22\x9d\x94\x96\x42\x23\xf7\xcd\x6d\xdd\x72\x8d\x2d\x0d\xc2\x22\x0a\xb0\xc2\x7e\x5f\x35\x8d\x2b\x7e\x04\xf1\xab\x1c\xc5\x06\x9a\x64\x33\x2b\x97\x8b\x89\xdd\xc5\x26\xe6\x4f\xc0\x44\x8f\x7f\xf6\x15\x00\x00\xff\xff\xdc\x9c\x73\xea\x3b\x02\x00\x00"

func templatesClientGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesClientGohtml,
		"templates/client.gohtml",
	)
}

func templatesClientGohtml() (*asset, error) {
	bytes, err := templatesClientGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client.gohtml", size: 571, mode: os.FileMode(420), modTime: time.Unix(1506818337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client.gohtml": templatesClientGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"client.gohtml": &bintree{templatesClientGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

