package {{ .Package }}

import (
  {{ if .UseContext }}
    "context"
  {{ end }}

  "github.com/segmentio/glue/client"

  {{ range .Imports }}
    {{ .Name }} "{{ .Path }}"
  {{ end }}
)

func New{{ .Service }}Client(rpcClient {{ if .UseContext }}client.ClientContext{{ else }}client.Client{{ end }}) *{{ .Service }} {
  c := new({{ .Service }})
  c.RPC = rpcClient
  return c
}

type {{ .Service }}IFace interface {
  {{ range .Methods }}
    {{ .Name }}(args {{ .ArgType }}) ({{ .ReplyType }}, error)
  {{ end }}
}

type {{ .Service }} struct {
  RPC {{ if .UseContext }}client.ClientContext{{ else }}client.Client{{ end }}
}

{{ range .Methods }}
  func (c *{{ $.Service }}) {{ .Name }}({{ if $.UseContext }}ctx context.Context, {{ end }}args {{ .ArgType }}) ({{ .ReplyType }}, error) {
    var reply {{ .ReplyType }}
    err := c.RPC.Call({{ if $.UseContext }}ctx,{{ end }} "{{ $.Service }}.{{ .Name }}", args, &reply)
    return reply, err
  }
{{ end }}
